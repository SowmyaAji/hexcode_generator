from scraper import get_common_codes
import secrets
import hashlib
import sqlite3

def get_hex():
    """
    This function returns a random hex string of length 8 using Python's secrets library
    :return: A hexadecimal string of 8 characters.
    """
    return secrets.token_hex(4).upper() # use secrets to generate a secure hex token rather than just a random choice hex string. 
    
def validate_common(random_string: str) -> bool:
    """
    It checks if the random string is present in any of the common hex codes
    
    :param random_string: The string to be validated
    :type random_string: str
    :return: A boolean value
    """
    
    common_codes = get_common_codes() # check if hex code is there in common magic hexcodes used in the software industry by scraping the hexspeak page
    return any(random_string in code for code in common_codes)

def validate_sequences(random_string: str) -> bool:
    """
    It takes the hexcode string and returns True if the string contains no sequences of 3 or more characters in a
    row, and no repeated characters
    
    :param random_string: the string to be validated
    :type random_string: str
    :return: the number of unique intervals between the characters in the string.
    """
    
    # check the string for sequences and repeated letters / numbers
    hex_list = [ord(c) for c in random_string]
    intervals = []
    for i, v in enumerate(hex_list[:-1]):
        intv = v - hex_list[i + 1]
        intervals.append(intv)
    return len(set(intervals)) > 3       
        

def generate_hashed_string(random_string: str) -> str:
    """
    It takes the hexcode string as an argument and returns a hashed string
    
    :param random_string: str
    :type random_string: str
    :return: The hashed string
    """
    
    return hashlib.sha256(random_string.encode('utf-8')).hexdigest()  # uses hashing to store the hex code generated and compares the hex with the ones in the db column
    
def validate_not_used(random_string: str, hashed_string:str, list_limit:int = 4294967296) -> str: # using 4294967296 as default value for maximum number of combinations of the 8-digit hexcode (16**8 = 4294967296). When that many values are stored in the hexcodes list, one interation of all unique hexcodes are done and can be restarted.
    """
    It takes a the hexcode string, hashes it and stores it in a database. If the hash is already in the database, it means the hexcode has been used before and the function returns nothing. If the hash is not in the database, it means the hexcode has not been used before and the function
    returns the hexcode
    
    :param random_string: The random string that is generated by the function
    :type random_string: str
    :param hashed_string: The hashed string of the random string
    :type hashed_string: str
    :param list_limit: The number of unique hexcodes that can be generated, defaults to 4294967296
    :type list_limit: int (optional)
    :return: a random string of 8 hexadecimal characters.
    """

    #  store hex string in db
    conn = sqlite3.connect("hexcodes.db")
    c = conn.cursor()
    c.execute("CREATE TABLE IF NOT EXISTS hexcodes (id int PRIMARY KEY, hexcode_hash char(65) NOT NULL)")
    c.execute("SELECT hexcode_hash FROM hexcodes")
    results = c.fetchall()
    if len(results) == list_limit: # if the first iteration of unique hexcodes are done drop the data base and restart the process of storing
        c.execute("DROP TABLE hexcodes")
        conn.commit()
        print("All valid hexcodes exhausted, restarting ...")
    else:
        if hashed_string not in results:
            c.execute("INSERT INTO hexcodes (hexcode_hash) VALUES (?)",(hashed_string, ))
            conn.commit()
            return random_string
        else:
            print("Hex code already used earlier")
        
def main():
    new_hex = get_hex()
    hashed_string = generate_hashed_string(new_hex)
    check_hex = validate_not_used(new_hex, hashed_string)
    if check_hex :
        if not validate_common(check_hex) and validate_sequences(check_hex):
            print("New Hex code: ", check_hex)
        else:
            print("Error, hexcode is invalid.")

if __name__ == "__main__":
    main()
    